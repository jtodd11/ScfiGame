using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

public class Player : MonoBehaviour
{
    [SerializeField]
    private float speed = 2.5f;
    private float gravity = 9.81f;
    private CharacterController _controller;
    [SerializeField]
    private GameObject MuzzleFlash;
    [SerializeField]
    private GameObject hitmarkerPrefab;
    [SerializeField]
    private AudioSource WeaponAudio;
    [SerializeField]
    private int currentAmmo;
    private int MaxAmmo = 50;

    private bool isReloading = false;


    private UIManager uiManager;

    public bool hasCoin = false;
    [SerializeField]
    private GameObject weapon;
    // Start is called before the first frame update
    void Start()
    {
        _controller = GetComponent<CharacterController>();
        Cursor.visible = false;
        Cursor.lockState = CursorLockMode.Locked;
        currentAmmo = MaxAmmo;
        uiManager = GameObject.Find("Canvas").GetComponent<UIManager>();
    }

    // Update is called once per frame
    void Update()
    {


        if (Input.GetMouseButton(0) && currentAmmo > 0)
        {
            Shoot();
        }
        else 
        {
            MuzzleFlash.SetActive(false);
            WeaponAudio.Stop();
        }
        if (Input.GetKeyDown(KeyCode.R) && isReloading == false)
        {
            isReloading = true;
            StartCoroutine(Reload());
        }
        if (Input.GetKeyDown(KeyCode.Escape))
        {
            //makes the mouse disappear
            Cursor.visible = true;
            Cursor.lockState = CursorLockMode.None;
        }
        CalculateMovement();
    }
    void Shoot()
    {

        MuzzleFlash.SetActive(true);
        currentAmmo--;
        uiManager.UpdateAmmo(currentAmmo);
        if (WeaponAudio.isPlaying == false)
        {
            WeaponAudio.Play();
        }

        Ray rayOrigin = Camera.main.ViewportPointToRay(new Vector3(0.5f, 0.5f, 0));
        //this calls the physics in the motion and who is hit by the line of fire or ray casting.
        RaycastHit hitInfo;
        if (Physics.Raycast(rayOrigin, out hitInfo))
        {
            Debug.Log("Hit: " + hitInfo.transform.name);
            Instantiate(hitmarkerPrefab, hitInfo.point, Quaternion.LookRotation(hitInfo.normal));

            Destructables crate = hitInfo.transform.GetComponent<Destructables>();
            if (crate != null)
            {
                crate.BrokeCrate();
            }
        }
    }
    void CalculateMovement()
    {
        Vector3 direction = new Vector3(Input.GetAxis("Horizontal"), 0, Input.GetAxis("Vertical"));
        Vector3 velocity = direction * speed;
        velocity.y -= gravity;
        velocity = transform.transform.TransformDirection(velocity);
        _controller.Move(velocity * Time.deltaTime);
    }
    IEnumerator Reload()
    {
        yield return new WaitForSeconds(1.5f);
        currentAmmo = MaxAmmo;
        uiManager.UpdateAmmo(currentAmmo);
        isReloading = false;
    }
    public void EnableWeapons()
    {
        weapon.SetActive(true);
    }
}
